group 'ru.colibri.template'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "ru.d10xa:gradle-allure-plugin:0.5.3"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.9'
    }
}

apply plugin: 'java'
apply plugin: 'ru.d10xa.allure'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply from: 'loadSettings.gradle'

repositories {
    maven{
        url "https://dl.bintray.com/alfa-laboratory/maven-releases/"
    }
    jcenter()
    mavenCentral()
}

allure {
    aspectjweaver = true
    junit = true
    clean = true
    allureResultsDir = "${project.buildDir}/reports/allure-results"
    allureReportDir = "${project.buildDir}/reports/allure-report"
}

dependencies {
    compile 'ru.colibri:colibri-ui:1.1.3-rc-10'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.github.reportportal:agent-java-jbehave:-SNAPSHOT'
}

distributions {
    main {
        contents {
            from { "$buildDir/reports/allure-report/" }
        }
    }
}

loadSettings()

distZip.dependsOn 'allureReport'

tasks.withType(Test)*.finalizedBy 'allureReport'
def artifactName = "report-"

publishing {
    publications {
        nebula(MavenPublication) {
            artifact distZip {
                classifier artifactName
            }
        }
    }
}

test {
    ignoreFailures = true
    Map<String, Object> systemProperties = getEnvironment()
    def runDescription
    def runTags
    if (project.hasProperty("platform")) {
        systemProperties.put("platform", "$platform")
        artifactName = artifactName+"$platform"
        runDescription = "Platform: $platform"
        runTags = "$runDescription".contains("iPhone")? "iOS":"Android"
    }
    if (project.hasProperty("user")) {
        systemProperties.put("user", "$user")
        runDescription = "$runDescription User: $user"
        runTags = "$runTags;$user"
    }
    if (project.hasProperty("testType")) {
        systemProperties.put("testType", "$testType")
        runDescription = "$runDescription Cycle: $testType"
        runTags = "$runTags;$testType"
    }
    if (project.hasProperty("buildVersion")) {
        systemProperties.put("buildVersion", "$buildVersion")
        artifactName = artifactName+"-"+"$buildVersion"
        runDescription = "$runDescription Build: $buildVersion"
        runTags = "$runTags;$buildVersion"
    }
    if (project.hasProperty("rptags")){
        runTags = "$runTags;$rptags"
    }
    systemProperties.put("rp.description","$runDescription")
    systemProperties.put("rp.tags","$runTags")
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}